<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<bean id="customAccessDenied" class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="kr.or.ddit.security.CustomLoginSuccessHandler"></bean>
	<!-- 사용자가 정의한 비밀번호 암호화 처리기를 빈으로 등록 -->
<!-- 	<bean id="customPasswordEncoder" class="kr.or.ddit.security.CustomNoOpPasswordEncoder"></bean> -->
	<!-- 스프링 시큐리티에서 제공하는 BCryptPasswordEncoder 클래스를 자바 빈으로 등록 -->
	<bean id="bcryptPassEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<!-- 사용자 정의 사용자 상세기능 *** -->
	<bean id="customUserDetailsService" class="kr.or.ddit.security.CustomUserDetailsService"></bean>
	
	<security:http>
<!-- 		<security:intercept-url pattern="/board/list" access="permitAll"/> -->
<!-- 		<security:intercept-url pattern="/board/register" access="hasRole('ROLE_MEMBER')"/> -->
<!-- 		<security:intercept-url pattern="/notice/list" access="permitAll"/> -->
<!-- 		<security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')"/> -->
	
		<!-- 기본적인 폼 인증 기반의 인증 기능을 사용한다. -->
<!-- 		<security:form-login/> -->

		<!-- 사용자 정의 로그인 페이지 작성 -->
<!-- 		<security:form-login login-page="/login"/> -->
		<!-- 로그인 성공 후 처리를 담당하는 처리자로 지정한다. -->
			<security:form-login login-page="/login" authentication-success-handler-ref="customLoginSuccess"/>
		<!-- 로그인이 된 회원 중에 권한이 없을 때, 접근 access 거부 denied 처리자 handler의 URI를 지정합니다. -->
<!-- 		<security:access-denied-handler error-page="/accessError"/> -->
		
		<!-- 
			자동 로그인
			- 데이터 소스를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록
			- 쿠키의 유효시간을 지정한다(604800: 7일)
		 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
		
		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃 한 후에 세션을 무효화하기 위한 설정을 true로 한다. -->
		<!-- 로그아웃을 하면 자동로그인에 사용하는 쿠키도 삭제해 주도록 설정(delete-cookies) -->
		<security:logout logout-url="/logout" invalidate-session="true" delete-cookies="remember-me, JSESSION_ID"/>

		<!-- 등록한 CustomAccessDeniedHandler 클래스를 활용한 접근 거부 처리자로 지정한다. -->
		<security:access-denied-handler ref="customAccessDenied"/>
	</security:http>
	
	<!-- 지정된 아이디와 패스워드로 로그인이 가능하도록 설정한다. -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
<!-- 			<security:user-service> -->
				<!-- 
					메모리상에 아이디와 패스워드를 지정하고 로그인을 처리합니다.
					스프링 시큐리티 5버전 이상부터는 패스워드 암호화 처리기를 반드시 이용해야 하는데,
					암호화 처리기를 사용하지 않도록 하기 위해서는 {noop}문자열을 비밀번호 앞에 꼭 붙여서 사용하여야 합니다.
				 -->
<!-- 				<security:user name="member" password="{noop}1234" authorities="ROLE_MEMBER"/> -->
<!-- 				<security:user name="admin" password="{noop}1234" authorities="ROLE_MEMBER, ROLE_ADMIN"/> -->
<!-- 			</security:user-service> -->
		
<!-- 		<security:jdbc-user-service data-source-ref="dataSource"/> -->
<!-- 		<security:password-encoder ref="customPasswordEncoder"/> -->

			<!--  스프링 시큐리티가 원하는 결과를 반환하는 쿼리를 작성하여 지정한다. -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource"  -->
<!-- 			users-by-username-query="select user_id, user_pw, enabled from member where user_id = ?" -->
<!-- 			authorities-by-username-query="select m.user_id, ma.auth from member_auth ma, member m where ma.user_no = m.user_no and m.user_id = ?"/> -->
		
			<security:password-encoder ref="bcryptPassEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>
