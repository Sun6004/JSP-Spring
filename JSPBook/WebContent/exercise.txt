 01장 JSP 개요 : 원리를 이해하고 개발 환경 구축하기.
 	01. 정적 웹 페이지와 동적 웹 페이지의 차이점을 설명하시오.
 		- 정적 웹 페이지는 컴퓨터에 저장된 텍스트 파일을 그대로 보는 것이고, 동적 웹 페이지는 저장된 내용을 다른 변수로 가공 처리하여 보는 것이다.
 		 정적 웹 페이지는 Html과 같은 웹 언어로 작성하고, 동적 웹 페이지는 PHP, ASP, JSP와 같은 웹 언어로 작성한다.
 		 정적 웹 페이지는 미리 만들어놓은 정보만 보여주기 때문에 고객의 취향이나 변화에 적응할 수 없고, 새로운 것을 추가, 수정, 삭제하는
 		 작업을 모두 수동으로 처리해야 하기 때문에 관리가 어려움. 하지만, 동적인 요소가 없기 때문에 DB도 필요없고 구축하기 쉬우며, 단순 문서로만 
 		 이루어져 있어 서버간 통신이 거의 없고 속도가 빠름. 또한 정적 문서로만 이루어져 있기 때문에 모든 호스팅 서버에서도 동작할 수 있다는 장점.
 		 그러나 기술이 발전함에 따라 사용자의 기호에 맞게 능동적으로 변화하는 웹 페이지가 필요해져서 이를 위해 동적 웹 페이지를 제공하는
 		 PHP, ASP, JSP와 같은 언어가 개발됨. 현재 우리가 보는 대부부ㅠㄴ의 휍 페이지는 동적 웹 페이지라고 할 수 있다.
 		 동적 웹 페이지는 사용자가 웹 페이지에 글을 작성하거나 환경 설정 등을 봐꾸면 그 내용이 서버에 있는 db에 저장되고 결과가 웹 페이지에 반영되는
 		 형태로 동작합니다.
 		 
 	02. 웹 프로그래밍 언어JSP의 특징을 설명하시오.
 		-1)jsp는 서블릿 기술의 확장이다
 			jsp에서는 서블릿의 모든 기능을 사용할 수 있음. 즉 서블릿과 마찬가지로 jdbc,jndo,ejb등을 모두 포함하고 있는 강력한 엔터프라이즈 자바 api를 사용할
 			수 있음. 또한 쉽게 개발할수있도록jsp에서 미리 정의된 태그, 표현식 언어와 사용자 정의 태그를 사용할 수 있음.
 		-2) jsp는 유지 관리가 용의함.
 			서블릿 기술에는 프리젠테이션 로직과 비즈니스 로직이 섞여 있지만 jsp기술의 경우 프레젠테이션 로직과 비즈니스 로직을 분리가능하기 때문에 관리가 쉬움
 		-3) 빠른 개발이 가능
 			코드를 수정했을 때 서블릿에서는 업데이트를 하고 다시 컴파일해야함. 그러나 jsp의 경우 다시 컴파일하고 프로젝트를 배포할 필요없음.
 		-4) 코드의 길이를 줄일 수 있다.
 			jsp에서는 엑션태그, jstl, 사용자 정의 태그 등의 다양한 태그와 표현언어, 내장객체 등을 사용함으로써 서블릿보다 코드를 줄일 수 있음.
 			
 	03. jsp페이지의 처리과정을 설명하시오.
 	
 		1)웹 브라우저가 웹 서버에 jsp요청
 		웹 서버는 요청된 hello.jsp에서 jsp확장자를 발견하여 jsp페이지임을 확인하고 웹 서버에 있는 jsp컨테이너에 전달,
 		2)jsp컨테이너는 jsp페이지를 서블릿 프로그렘인 hello_jsp.java로 변환
 		3)jsp 컨테이너가 서블릿 프로그램을 컴파일하여 hello_jsp.class로 만들고 이를 웹 서버에 전달합니다.
 		4) 웹 서버는 정적 웹 페이지처럼 .class의 실행 결과를 웹 브라우저에 응답으로 전달하므로 웹 브라우저는 새로 가공된 html페이지를 동적으로 
 		  처리한 결과를 보여줌.
 		 
 ---------------------------------------------------------------------------------------------------------------------------------------
 02장 스크립트 태그: 시작 페이지 만들기
 	01. 스크립트 태그의 세가지 종류에 대해 간단히 설명하시오.
 		1) 선언문 태그
 		
 		선언문 태그에 선언된 변수와 메서드는 jsp 페이지 임의의 위치에서 선언할 수 있으며, 스크립틀릿 태그보다 나중에 선언해도
 		스크립틀릿 태그에서 사용할 수 있다. 선언문 태그로 선언된 변수는 전역 변수로 사용되고, 선언문 태그로 선언된 메서드는 전역 변수처럼 
 		전역 메서드로 사용됨.
 		
 		2) 스크립틀릿 태그
 		
 		스크립틀릿 태그는 out 객체를 사용하지 않고도 쉽게 html응답을 만들어낼 수 있음.
 		가장 일반적으로 사용되며 변수 또는 메서드 선언, 유효식 등 다수를 포함할 수 있음.
 		모든 텍스트, html태그, 또는 jsp요소는 스크립틀릿 태그 외부에 있어야함.
 		
 		3) 표현문태그
 		
 		표현문 태그를 이용하여 선언문 태그 또는 스크립틀릿 태그에서 선언된 변수나 메서드의 반환 값을 외부로 출력 가능
 		표현문 태그는 스크립틀릿 태그에서 사용할 수 없으므로 이 경우에는 out.println 메서드를 사용해야 함.
 		표현문 태그에 숫자, 문자 등의 기본 데이터 타입과 자바 객체 타입도 사용가능. 그리고 표현문 태그에 작성된 모든 자바 코드의 값은 
 		문자열로 변환되어 웹 브라우저에 출력됨.
 		
 	02. 선언문 태그와 스크립틀릿 태그의 차이점
 	
 		선언문 태그
 		-변수뿐만 아니라 메서드를 선언가능
 		-서블릿 프로그램으로 변환될 때 jspService()메서드 외부에 배치
 		
 		스크립틀릿 태그
 		- 스크립틀릿 태그는 메서드 없이 변수만을 선언할 수 있음
 		- 서블릿 프로그램으로 변환될 때 jspService메서드 내부에 배치
 		
 	03. 애플리케이션 실행 결과에는 보이지 않는 jsp 주석 표기법
 		<%-- -->
 		
 
 03장 디렉티브 태그: 한글 출력 및 페이지 모듈화 하기
 	
 	01. 디렉티브 태그의 세 가지 유형에 대해 간단히 설명하시오.
 		
 		page(<%@page... %>) : jsp페이지에 대한 정보 설정
 		include (<%@include... %>) : jsp페이지의 특정 영역에 다른 문서를 포함
 		 taglib(<%@taglib... %>) : jsp 페이지에서 사용할 태그 라이브러리를 설정
 		 
 	02. jsp 페이지가 사용할 자바 클래스를 설정하기 위한 page디렉티브 태그의 속성 : import
 	
 	03. jsp 페이지의 특정 영역에 외부 파일의 내용을 포함하는 디렉티브 태그 : include
 	
 	
 
 04장 액션태그
 
 	01. 자바빈즈 클래스
 		-vo와 같은 데이터를 저장할 공간
 	
 	02. 페이지 이동방식
 	
 		1)forward
 			- request, response가 1개씩 존재
 			- 최초의 담겨져 넘어온 파라미터는 최초의 생성된 request에 담겨져 있으므로 응답으로 내보내질 때,
 			  해당 parameter를 담아 보낼 때 request scope영역에 담아 보낼 수 있고 값을 꺼낼 수 있다.
 			- 응답으로 나가는 리턴 페이지 값은 url이 아닌 페이지 경로가 된다.
 			- 주로 데이터를 가용하여 페이지를 요청하는 요청이 아닌 단순히 페이지만을 요청하는 처리일 때 페이지 이동방식 forward를 활용
 			
 		2) redirect
 			- request, response가 2개씩 존재 ( 꼭2개는 아님, 새로운request가 생성된단 뜻)
 			- 최초 요청 url에 담겨져 넘어온 parameter는 새롭게 만들어진 request에서 사용불가
 			- 최초 요청 url에 담겨져 넘어온 parameter를 이용하여 새롭게 요청된 url에 request scope 영역에 담아 해당 페이지로 응답할때,
 			  새롭게 만들어진 request scope에서는 값을 꺼낼수 없으므로, session scope를 활용하여 값을 꺼내야함.
 			- 응답으로 나가는 리턴 페이지 값은 페이지 경로가 아닌 url경로가 된다.
 			- redirect를 활용하는 경우는 다양한 로직(상황)에 따라 부여되는 페이지 이동방식이 다르겠지만, 주로 데이터를 가용하거나 변형한
 			  후에 데이터를 가용하고 변형하는 기능이 재 요청되지 않도록 하기 위해서 redirect인 페이지 이동방식을 활용한다.
 			
 			
 5장 내장 객체: 상품 상세 정보 표시하기
 	01. 폼 페이지에서 입력된 데이터를 전달하는 요청 파라미터 값을 JSP페이지로 가져오는 내장 객체는 무엇인지, 그리고 관련 메소드에 대해 간단히 설명하시오.
 	
 		request 내장객체
 		
 		요청 파라미터 관련 메소드 		| 	반환유형	|	설명
 		-----------------------------------------------------------------
 		getParameter(String name)		|	String		| 요청파라미터가 name인 값을 전달받는다.
 										|				| 요청 파라미터 값이 없으면 null
 		-----------------------------------------------------------------------
 		getParameterValues(String name)	|	String[]	| 모든 요청 파라미터 이름이 name인값을 배열형태로 전달받음
 										|				| 값이 없으면 null
 		-----------------------------------------------------------------------		
 		getparameterNames()				|	Enumeration	| 모든 요청 파라미터의 이름과 값을 Enumeration객체 타입으로 전달받음.	
 		-----------------------------------------------------------------------	
 		getParameterMap()				|	Map			|모든 요청 파라미터의 이름과 값을 Map객체타입으로 전달받음
 										|				| Map객체 타입은 요청 파라미터 이름, 값 형식으로 구성
 										
 	
 	02. 서버에서 웹 브라우저에 다른 페이지로 강제 이동되도록 하는 내장 객체와 관련된 메서드
 		response 내장 객체
 						
 		페이지 이동 관련 메소드 		| 	반환유형	|	설명
 		-----------------------------------------------------------------
 		sendRedirect(String url)		|	void		|  설정한  페이지로 이동함
 										|				| 
 		-----------------------------------------------------------------------
 	
 	
06장 폼 태그: 상품 등록 페이지 만들기
	
	01. form태그에 사용하는 속성
	
	actrion : 폼 데이터를 받아 처리하는 웹페이지의 url설정
	method : 폼 데이터가 전송되는 HTTP방식을 설정
	name : 폼을 식별하기 위한 이름을 설정
	tatget : 폼 처리 결과의 응답을 실행할 프레임 설정
	enctype :  폼을 전송하는 컨텐츠 MIME 유형 설정
	accept-charset : 폼 전송에 사용할 문자 인코딩을 설정
	
	02. form 태그 내에 중첩하여 사용하는 태그를 나열하고 설명하시오.
	
		input 태그
		사용자가 택스트 입력이나 선택 등을 다양하게 할 수 있도록 공간을 만드는 태그로, 종료태그없이 단독사용가능
		
		select 태그
		여러개의 항목이 나타나는 목록 상자에서 항목을 선택하는 태그
		시작태그와 종료 태그가 있으며, 리스트 박스에 여러 항목을 추가 삽입하기 위해 반드시 option 태그 포함
		
		textarea 태그
		여러줄의 텍스트를 입력할 수 있는 태그. 특징은 입력 폼 안에 사용된 태그의 띄어쓰기가 그대로 출력됨.
		
	03. request 내장객체: 폼 페이지에서 전송된 데이터를 전달받는 메서드
		요청 파라미터의 값 받기: getParameter(요청 파라미터 이름: name)
		

07장 파일 업로드: 상품 이미지 등록하기
	01. 파일 업로드를 위한 form태그 내에 반드시 설정해야 하는 기법
		1) form태그의 method 속성은 Post
		2) form태그의 enctype 속성은 multipart/form-data
		3) form태그의 action 속성은 파일업로드를 처리할 jsp파일
		
	02. 파일을 서버에 업로드하는 처리기법
		01) commons-fileupload를 이용한 파일 업로드
		
		commons-fileupload를 이용하여 파일을 업로드하려면 먼저 commons-fileupload 패키지에
		포함되어 있는 DiskFileupload 객체를 생성
		생성된 객체를 통해 해당 클래스가 제공하는 메서드를 사용하여 웹 브라우저가 전송한 요청
		파라미터를 가져온다
		그리고 FileItem 클래스의 메서드를 사용하여 요청 파라미터가 일반 데이터인지 파일인지 분석 및 처리하여 파일을 업로드한다.
		
8장 유효성 검사: 상품 들옥 데이터의 유효성 검사하기
	01. 유효성 검사란?
		-유효성 검사는 사용자가 폼 페이지에서 입력한 데이터 값이 서버로 전송되기 전에 특정 규칙에 맞게 입력되었는지 검증하는 것.
	
	02. 유효성 검사를 위한 두가지 처리기법
		- 기본 유효성 검사는 사용자가 폼 페이지의 입력 항목에 입력한 데이터 값이 있는지 확인하고 데이터 길이, 숫자등 기본적이 맞는지 검사
		- 데이터 형식 유효성 검사는 사용자가 폼 페이지의 입력 항목에 입력한 데이터 값이 특정 형태에 적합한지 검사하기 위해 정규 표현식을
			사용하는 방법으로 기본 유효성 검사보다 복잡함.
	
	03. 유효성 검사를 위한 핸들러 함수와 폼 페이지를 작성하는 기법
		- input 태그의 type 속성값이 submit 인 경우 onclick속성을 이용하여 핸들러 함수 설정
		- 우리는 input type submit이 아닌 botton으로 하되, onclick이벤트를 부여하거나 form태그 내에 onsubmit속성을 이용하여 이벤트를 부여
		- 자바스크립트를 이용하여 스크립트 내에 핸들러 함수를 작성
		
	03. 폼 페이지에서 입력된 데이터 값을 핸들러 함수로 가져오기 위해 form태그의 name속성 또는 forms객체 이용
	    forms 객체를 이용하는 경우 forms는 배열의 형태이기 때문에 length속성으로 크기를 알 수 있고 배열 값인 iondex는 form태그가 나타내는 순서로 0부터 시작

10장 시큐리티: 상품 등록 페이지의 보안 처리
	01. 시큐리티란?
		-시큐리티는 허가된 사용자만이 특정 웹 페이지에 접근할 수 있도록 제한하는 보안 기능을 말함. 시큐리티는 사용자가 권한이 없는 데이터에
		접근하는 것을 막거나 웹 공격자가 전송 데이터를 중간에 가로채는 것을 방지하는 등 중요함
	
	02. 시큐리티의 두가지 처리 기법
		- 선언적 시큐리티는 웹 애플리케이션 배포 설명자(web, xml) 파일에 보안 구성을 작성하여 수행
		  web, xml 파일에는 보안 역할, 보안 제약사항, 인증 처리 등을 설정하여 보안을 구성함.
		- 프로그래밍적 시큐리티는 웹 애플리케이션의 보안을 위해 코드를 작성하여 사용자의 권한 부여를 처리하는 방식
		  선언적 시큐리티의 보안으로 충분하지 않을 때, request 내장 객체의 메소드를 사용하여 사용자를 승인하는 방법.
	
	03. form  기반 인증 처리 기법으로 로그인 페이지를 작성하는 방법
	
			속성이름		|			속성값
	------------------------------------------------------	
	form태그의 action속성	|	j_security_check
	 사용자의 name 속성		|	j_username
	 비밀번호의 name		|	j_password
	-------------------------------------------------------
	- form 기반 인증 처리 기법에서 해당 값으로 설정하지 않는 경우, 시큐리티 보안이 적용되지 않으며,
	  action 경로에 설정되어 있는 j_security_check의 경로 설정부는 apache-tomcat의 tomcat-users.xml안에 들어있는
	  역할명과 역핢명에 해당되는 계정에 따라 권한이 부여된다.
	 

11장 예외처리: 예외처리 페이지 만들기

	01. 예외 처리란?
		- 예외 처리는 프로그램이 처리되는 동안 특정한 문제가 발생했을 때 처리를 중단하고 다른 처리를 하는 것으로 오류 처리라고도 함.
	
	02. page 디렉티브 태그를 이용한 예외 처리 기법에 사용되는 속성
		- errorPage 속성으로 오류 페이지 호출하기: errorPage 속성은 오류 페이지를 호출하는 page 디렉티브 태그의 속성으로 형식은 다음과 같다.
		  <%@ page errorPage="오류 페이지url"%> 
		- errorPage에 설정된 오류 페이지url은 해당 속성이 설정되어 있는 페이지에서 에러가 발생했을 때, errorPage 속성에 설정되어있는
		  에러 페이지로 이동하여 에러 메세지를 확인할 수 있도록 기능을 제공한다. (에러 페이지를 활용한 예외 처리 방법중 하나)
		- isErrorPage 속성으로 오류 페이지 만들기: isErrorPage 속성은 현재 jsp 페이지를 오류 페이지로 호출하는 page 디렉티브 태그의
		  속성으로 형식은 <%@ page isErrorPage="trur"%>이다
		- isErrorPage에 설정된 boolean 타입의 값인 true/false는 에러 페이지를 사용할지 안할지에 대한 내용이 아닌 여러 내장객체들 중,
		  exception 내장객체를 사용할지 안할지 여부를 설정. isErrorPage 에 true 값으로 설정되어 있는 경우 exception 내장객체를 
		  사용할 수 있어, 에러 메세지를 출력할 수 있다.
	
	03. web.xml 파일을 이용한 예외 처리 기법에 대해 설명.
		- 오류 코드로 오류 페이지 호출하기
			<error-page>
				<error-code>오류코드</error-code>
				<location> 오류 페이지url</location>
			</error-page>
		- 에외 유형으로 오류 페이지 호출하기
			<error-page>
				<exception-type>예외 유형</exception-type>
				<location> 오류 페이지url</location>
			</error-page>
		- 대표적으로 많이 사용되는 에러 예외 처리유형이다. web.xml 에 error-page 태그를 활용하여 에러코드, 에러유형에 따라 에러를 컨트롤 할 수 있다.


12장 필터: 로그 기록하기
	01. 필터란?
		- 필터는 클라이언트와 서버 사이에서 request 와 respone 객체를 먼저 받아 사전/사후 작업 등 공통적으로 필요한 부분을 처리하는 것
		  필터를 생각했을 때 제일 먼저 떠오르는 연상 단어처럼 무언가를 걸러주는 역할을 담당
		 
	02. Filter 인터페이스에 있는 메서드의 종류와 기능
		메서드		|	설명
	----------------------------------------------------------
	init(...)		|	필터 인스턴스의 초기화 메서드.
	doFilter(...)	|	필터 기능을 작성하는 메서드
	destroy(...)	|	필터 인스턴스의 종료 전에 호출되는 메서드.
	--------------------------------------------------------------
		- init메서드는 인스턴스의 초기화 메서드 이므로, 서버가 로드될 때 딱 한번 실행되며 한번 실행되기 때문에 그 안에서 값을 초기화 하는 기능을 제공
		- doFilter 메서드는 web.xml에 설정된 필터의 url-pattern이 실행될 때마다 doFilter메서드가 실행된다.
		  doFilter는 여러 필터가 존재할 경우 chain으로 묶에 있는데 최초의 필터가 서버로 전달되어 넘어오는 request, respone 내장객체를
		  제일 먼저 잡아 1차 데이터 처리 또는 가공 후, doFilter 메서드를 통해 다음 필터가 존재한다면 다음 필터로 내장객체를 전달해주고, 필터가 존재하지 않고,
		  리소스가 존재한다면 리소스로 최종 내장객체를 전달하여 최초 요청에 대한 응답을 마무리한다.
		 
		* 필터를 적용하는 중에, 최종화면이 빈 하얀창이 떴다?
		- 필터를 적용함에 있어 doFilter 메서드 내, doFilter를 활용하여 request, respone를 전달해야 하는데, 전달하지 않아
		  필터쪽에서 request, respone 객체가 끝나버려 생기는 현상이다. 필터를 적용했다면 이 부분에 대한 점검도 검증해야함.
		  
		- destroy 메서드는 사용중인 브라우저가 닫히거나 생태계의 라이프 사이클이 끝나면 실행되는 메서드이다.
		  init에서 생성했던 객체, 초기화 했던 데이터 등등을 destroy메서드에서 close 하거나 초기화 할 수 있다.
	
	03. web.xml 파일에 필터를 구성하는 요소의 종류를 설명하시오.
		- <filter> : 웹 애플리케이션에서 자바 필터와 매개변수를 설정하는데 사용
		
		  <filter>
		  	<filter-name>필터 이름<filter-name>		
		  	<filter-class>클래스 이름<filter-class>
		  	[
		  		<init-param>
		  			<param-name><param-name>
		  			<param-value><param-value>
		  		<init-param>
		  	]
		  <filter>
		  
		- [] 안에 들어있는 init-param은 생략 가능하다.
		- filter name은 custom영역으로 내가 설정하고자 하는 name명으로 설정 가능
		- filter class는 Filter 인터페이스를 implements받은 클래스 구현체의 위치를 나타내는데,
		  해당 클래스의 class view영역의 퀄리파이드 name으로 복사해서 가져오면 패키지 구조를 포함한 해당 위치의 경로를 정확하게 오타 없이 가져올 수 있음.
		
		- <filter-mapping> : 특정 리소스에 대해 어떤 필터를 사용할지 설정하는데 사용한다.
		
		  <filter-mapping>
		  	<filter-name>필터 이름<filter-name>
		  	<url-pattern>요청 url패턴<url-pattern>
		  <filter-mapping>
		- filter-mapping은 filter 태그에서 만든 필터 영역과 매핑되는 곳이다.
		- filter-mapping 은 하나의 filter태그와 매핑된다.
	