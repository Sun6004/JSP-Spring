<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	JSP 시큐리티 web.xml설정
	
	1. 시큐리티 역잘 설정하는 방법
	
	<secutiry-role>
		<role-name>role1 </role-name> //역할 이름을 설정한다.
	</secutiry-role>
	
	2. 시큐리티 제약사항 설정하기
	
	<security-constraint>
  		<web-resource-collection> //웹 자원에 대한 접근 설정
  		<auth-constraint></auth-constraint> //웹 자원에 접근 할 수 있는 인증된 사용자 설정
  		<user-data-constraint> </user-data-constraint> //데이터 전송 시 데이터 보호를 설정
  	</security-constraint>
  	
  	2.1 웹 자원에 대한 접근 설정
  	<web-resource-collection>
  		<web-resource-name>JSPBook</web-resource-name> // 웹 자원의 이름을 설정하며 생략가능
  		<url-pattern>/ch10/security02.jsp</url-pattern> // 접근 제한을 요청할 때, URL목록을 설정
  		<http-method>GET</http-method> // HTTP 메서드를 설정(get,post)
  	</web-resource-collection>
  	
  	2.2 웹 자원에 접근할 수 있는 인증된 사용자 설정
  		- auth-constraint를 설정하지 않으면 웹 서버는 사용자 인증을 요구하지 않고 사용자의 요청을 승인한다(permitAll)
  		<auth-constraint>
  			<description>프로그래밍적 시큐리티 보안 처리하기</description> // 설명을 작성(거의안씀)
  			<role-name>role1</role-name> // 반드시 tomcat-user.xml에 등록된 역할과 사용자 기재
  		</auth-constraint>
  		
  	2.3  클라이언트와 서버간에 데이터를 전송할 떄 데이터를 보호하는 방법을 설정
  		- none: 기본값으로 데이터를 보호하지 않을 때. 	//기본적으로 제일 많이쓰임.
  		- integral: 전송중 데이터가 변경되지 않았음을 보장(데이터무결성)
  		- confidential: 전송 중 데이터를 아무도 훔쳐보지 않았음을 보장(기밀성)
  		
  		<user-data-constraint>
  			<transport-gurantee>NONE </transport-gurantee>
  		 </user-data-constraint>

	3. 시큐리티 인증 설정하기
	
		<login-config>  	
			<auth-method>FORM</auth-method> //웹 자원에 대한 인증 처리방식 설정
			<role-name>role1</role-name> // 웹 자원에 접근할 수 있는 인증된 사용자 설정
			<form-login-config></form-login-config> //데이터 전송 시 데이터 보호를 설정
		</login-config>  		
		
	3.1 웹 애플리케이션의 인증 처리 기법을 설정하는 요소
		- BASIC: 웹 자원을 보호하는 간단하고 가장 일반적인 방법
		- DIGEST: 암호화 매커니즘을 이용하여 전송, 많이안씀
		- FORM: (가장대표적) 일반적인 폼 페이지를 이용하여 로그인 정보를 서버에 전송하는 방식
				암호화 되지 않은 로그인 정보를 그대로 전송
		**FROM 기반 인증시에는 별도 form이 필요함
		- CLIENT-CERT : 클라이언트가 인증서를 가지고 공인 키 인증 방식을 사용하여 로그인하는 방식
						클라이언트가 인증서를 가지고 있어야만 로그인되므로 비즈니스 환경에서만 사용.
		<auth-method> FROM</auth-method>
		
	3.2 기본 인증의 영역 이름을 설정
		-FORM기반 인증이나 다른 인증 방법에 필요하지 않기 때문에 아무런 영향을 미치지 않지만, 데이터를 문서화 하는데 일반적으로 사용된다.
		<realm-name> 영역이름 <realm-name>
		
	3.3 인증 처리를 위한 로그인 및 오류 페이지를 설정
		-auto-method 요소가 FORM 기반 인증 처리 기법으로 설정되었을 때 사용
		
		<form-login-config>
  			<form-login-page>/ch10/login.jsp</form-login-page>
  			<form-error-page>/ch10/login_failed.jsp</form-error-page>
  		</form-login-config>	
 -->
 
 <!-- 시큐리디 역할 설정하기 -->
 	<security-role>
 		<!-- role-name으로 설정하는 역할 이름은 반드시 tomcat-user.xml에 등록된것 사용 -->
 		<role-name>role1</role-name>
 		<role-name>role2</role-name>
 		<role-name>manager</role-name>
 	</security-role>
 	
 <!-- 
 	시큐리티 제약 사항 설정하기
 	- 사용자의 요청 url에 대한 접근 권한을 정의
  -->
  <security-constraint>
  	<!-- 엡 자원의 이름을 설정 -->
  	<web-resource-collection>
  		<web-resource-name>JSPBook</web-resource-name> 
  		<url-pattern>/ch10/security02.jsp</url-pattern> 
  		<http-method>GET</http-method>
  	</web-resource-collection>
  	
  	<!--
  		웹 자원에 접근할 수 있는 인증된 사용자 설정
  		- auth-constraint 요소를 생략하면 웹 서버는 사용자 인증을 요구하지 않고 사용자의 요청을 승인한다. 
  	 -->
  	 <auth-constraint>
  	 	<!-- 권한 부여 제약 사항에 대한 설명을 기술 -->
  	 	<description>설명을 작성해주세요.</description>
  	 	<!-- 
  	 		권한이 부여된 사용자의 이름을 대문자, 소문자를 구분하여 설정한다.
  	 		이때, tomcat-users.xml에 등록된 역할과 사용자여야 한다.
  	 		모든 사용자에게 권한을 부여하려면 *로 설정
  	 	 -->
  	 	 <role-name>role1</role-name>
  	 </auth-constraint>
  	 <!-- 
  	 	클라이언트와 서버간에 데이터를 전송할 때 데이터를 보호하는 방법을 설정
  	 	- NONE: 기본값으로 데이터를 보호하지 않겠다는 의미
  	 	- INTRGRAL: 전송중 데이터가 변경되지 않았음을 보장한다는 의미
  	 	- CONFIDENTIAL: 전송중 데이터를 아무도 훔쳐보지 않았음을 보장한다는 의미
  	  -->
  	  <user-data-constraint>
  	  	<transport-guarantee>NONE</transport-guarantee>
  	  </user-data-constraint>
  </security-constraint>
  
  <!-- 
  	시큐리티 인증 설정하기
  	- 인증 처리를 위한 로그인 페이지나 오류 페이지를 호출하는데 사용한다.
  -->
  
  <login-config>
  	<!-- 
  		웹 애플리케이션 인증 처리 기법을 설정하는 요소
  		- BASIC: 웹 자원을 보호하는 간단하고 일반적인 방법
  		- DIGEST: 암호화 매커니즘을 이용하여 전송(많이 사용X)
  		- FORM: 일반적인 폼 페이지를 이용하여 로그인 정보를 서버에 전송하는 방식(암호화 되지 않은 로그인 정보 전송)
  			> 대표적으로 많이 사용
  			> FORM인증 방식인 경우, 로그인페이지/ 로그인 실패 페이지를 custon해서 제공가능
  		-CLIENT-CERT: 클라이언트가 인증서를 가지고 공인 키 인증 방식을 사용하여 로그인하는 방식(클라이언트가 인증서를 가지고 있어야만 로그인됨)
  		
  		** FORM 기반 인증 처리시 지켜야 할 사항
  		- 웹 브라우저가 인증 처리에 직접적으로 관여하지 않기 때문에 사용자가 로그인 페이지에 인증 정보를 직접 입력해서 전달해 주어야 한다.
  			> form 태그의 action 속성 경로로 j_security_check 로 설정
  			> 아이디를 입력할 input 태그의 name을 j_username으ꃠ 설정
  			> 비밀번홀를 입력할 input 태그의 name을 j_password으ꃠ 설정
  		반드시 action, name 을 j_의 형태로 작성해야 함!
  	 -->
  	 <auth-method>FORM</auth-method>
  	 <!--  
  	 	기본 인증의 영역 이름을 설정
  	 	- FORM기반 인증이나 다른 인증 방법에 필요하진 않음
  	 	- 데이터를 문서화하는데 설명으로 사용됨
  	  -->
  	  <realm-name> 영역 이름</realm-name>
  	  <!-- 
  	  	인증 처리를 위한 로그인 및 오류 페이지를 설정
  	  	-auth-method가 FORM기반의 인증 처리 기법으로 설정 시 사용
  	   -->
  	   <form-login-config>
  	   <!-- 인증처리를 위한 로그인 페이지 설정(로그인 페이지 경로 설정) -->
  	   <form-login-page>/ch10/login.jsp</form-login-page>
  	   <!-- 인증처리 후 오류 페이지 설정(로그인 오류 페이지 경로를 설정한다) -->
  	   <<form-error-page>/ch10/login_failed.jsp</form-error-page>
  	   </form-login-config>
  </login-config>
  
  
  
  